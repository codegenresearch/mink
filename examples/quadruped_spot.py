from pathlib import Path\n\nimport mujoco\nimport mujoco.viewer\nimport numpy as np\nfrom loop_rate_limiters import RateLimiter\n\nimport mink\n\n_HERE = Path(__file__).parent\n_XML = _HERE / "boston_dynamics_spot" / "scene.xml"\n\n\nif __name__ == "__main__":\n    model = mujoco.MjModel.from_xml_path(_XML.as_posix())\n    data = mujoco.MjData(model)\n\n    # Setup IK.\n\n    configuration = mink.Configuration(model)\n\n    feet = ["FL", "FR", "HR", "HL"]\n\n    base_task = mink.FrameTask(\n        frame_name="body",\n        frame_type="body",\n        position_cost=1.0,\n        orientation_cost=1.0,\n    )\n\n    posture_task = mink.PostureTask(model, cost=1e-5)\n\n    feet_tasks = []\n    for foot in feet:\n        task = mink.FrameTask(\n            frame_name=foot,\n            frame_type="geom",\n            position_cost=1.0,\n            orientation_cost=0.0,\n        )\n        feet_tasks.append(task)\n\n    eef_task = mink.FrameTask(\n        frame_name="EE",\n        frame_type="site",\n        position_cost=1.0,\n        orientation_cost=1.0,\n    )\n\n    tasks = [base_task, posture_task, *feet_tasks, eef_task]\n\n    # IK settings.\n    base_mid = model.body("body_target").mocapid[0]\n    feet_mid = [model.body(f"{foot}_target").mocapid[0] for foot in feet]\n    eef_mid = model.body("EE_target").mocapid[0]\n\n    solver = "quadprog"\n    pos_threshold = 1e-4\n    ori_threshold = 1e-4\n    max_iters = 20\n\n    with mujoco.viewer.launch_passive(\n        model=model, data=data, show_left_ui=False, show_right_ui=False\n    ) as viewer:\n        mujoco.mjv_defaultFreeCamera(model, viewer.cam)\n\n        mujoco.mj_resetDataKeyframe(model, data, model.key("home").id)\n        configuration.update(data.qpos)\n        mujoco.mj_forward(model, data)\n\n        posture_task.set_target_from_configuration(configuration)\n        for foot in feet:\n            mink.move_mocap_to_frame(model, data, f"{foot}_target", foot, "geom")\n        mink.move_mocap_to_frame(model, data, "body_target", "body", "body")\n        mink.move_mocap_to_frame(model, data, "EE_target", "EE", "site")\n\n        rate = RateLimiter(frequency=500.0)\n        while viewer.is_running():\n            base_task.set_target(mink.SE3.from_mocap_id(data, base_mid))\n            for i, task in enumerate(feet_tasks):\n                task.set_target(mink.SE3.from_mocap_id(data, feet_mid[i]))\n            eef_task.set_target(mink.SE3.from_mocap_id(data, eef_mid))\n\n            # Compute velocity and integrate into the next configuration.\n            for i in range(max_iters):\n                vel = mink.solve_ik(configuration, tasks, rate.dt, solver, 1e-3)\n                configuration.integrate_inplace(vel, rate.dt)\n\n                pos_achieved = True\n                ori_achieved = True\n                for task in [eef_task, base_task, *feet_tasks]:\n                    err = task.compute_error(configuration)\n                    pos_achieved &= bool(np.linalg.norm(err[:3]) <= pos_threshold)\n                    ori_achieved &= bool(np.linalg.norm(err[3:]) <= ori_threshold)\n                if pos_achieved and ori_achieved:\n                    break\n\n            data.ctrl = configuration.q[7:]\n            mujoco.mj_step(model, data)\n\n            # Visualize at fixed FPS.\n            viewer.sync()\n            rate.sleep()\n