from pathlib import Path\n\nimport mujoco\nimport mujoco.viewer\nimport numpy as np\nfrom loop_rate_limiters import RateLimiter\n\nimport mink\n\n_HERE = Path(__file__).parent\n_XML = _HERE / "kuka_iiwa_14" / "scene.xml"\n\n\nif __name__ == "__main__":\n    model = mujoco.MjModel.from_xml_path(_XML.as_posix())\n    data = mujoco.MjData(model)\n\n    ## =================== ##\n    ## Setup IK.\n    ## =================== ##\n\n    configuration = mink.Configuration(model)\n\n    tasks = [\n        end_effector_task := mink.FrameTask(\n            frame_name="attachment_site",\n            frame_type="site",\n            position_cost=1.0,\n            orientation_cost=1.0,\n            lm_damping=1.0,\n        ),\n        posture_task := mink.PostureTask(model=model, cost=1e-2),\n    ]\n\n    ## =================== ##\n\n    # IK settings.\n    solver = "quadprog"\n    pos_threshold = 1e-4\n    ori_threshold = 1e-4\n    max_iters = 20\n\n    with mujoco.viewer.launch_passive(\n        model=model, data=data, show_left_ui=False, show_right_ui=False\n    ) as viewer:\n        mujoco.mjv_defaultFreeCamera(model, viewer.cam)\n\n        mujoco.mj_resetDataKeyframe(model, data, model.key("home").id)\n        configuration.update(data.qpos)\n        posture_task.set_target_from_configuration(configuration)\n        mujoco.mj_forward(model, data)\n\n        # Initialize the mocap target at the end-effector site.\n        mink.move_mocap_to_frame(model, data, "target", "attachment_site", "site")\n\n        rate = RateLimiter(frequency=500.0, warn=False)\n        while viewer.is_running():\n            # Update task target.\n            T_wt = mink.SE3.from_mocap_name(model, data, "target")\n            end_effector_task.set_target(T_wt)\n\n            # Compute velocity and integrate into the next configuration.\n            for i in range(max_iters):\n                vel = mink.solve_ik(configuration, tasks, rate.dt, solver, 1e-3)\n                configuration.integrate_inplace(vel, rate.dt)\n                err = end_effector_task.compute_error(configuration)\n                pos_achieved = np.linalg.norm(err[:3]) <= pos_threshold\n                ori_achieved = np.linalg.norm(err[3:]) <= ori_threshold\n                if pos_achieved and ori_achieved:\n                    break\n\n            data.ctrl = configuration.q\n            mujoco.mj_step(model, data)\n\n            # Visualize at fixed FPS.\n            viewer.sync()\n            rate.sleep()\n