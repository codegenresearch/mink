from pathlib import Path\n\nimport mujoco\nimport mujoco.viewer\nimport numpy as np\nfrom loop_rate_limiters import RateLimiter\n\nimport mink\n\n\n_HERE = Path(__file__).parent\n_XML_PATH = _HERE / "kuka_iiwa_14" / "scene.xml"\n\n\nif __name__ == "__main__":\n    model = mujoco.MjModel.from_xml_path(_XML_PATH.as_posix())\n    data = mujoco.MjData(model)\n\n    configuration = mink.Configuration(model)\n\n    end_effector_task = mink.FrameTask(\n        frame_name="attachment_site",\n        frame_type="site",\n        position_cost=1.0,\n        orientation_cost=1.0,\n        lm_damping=1.0,\n    )\n    posture_task = mink.PostureTask(model=model, cost=1e-2)\n\n    tasks = [end_effector_task, posture_task]\n\n    solver = "quadprog"\n    position_threshold = 1e-4\n    orientation_threshold = 1e-4\n    max_iterations = 20\n\n    with mujoco.viewer.launch_passive(\n        model=model, data=data, show_left_ui=False, show_right_ui=False\n    ) as viewer:\n        mujoco.mjv_defaultFreeCamera(model, viewer.cam)\n\n        mujoco.mj_resetDataKeyframe(model, data, model.key("home").id)\n        configuration.update(data.qpos)\n        posture_task.set_target_from_configuration(configuration)\n        mujoco.mj_forward(model, data)\n\n        mink.move_mocap_to_frame(model, data, "target", "attachment_site", "site")\n\n        rate_limiter = RateLimiter(frequency=500.0, warn=False)\n        while viewer.is_running():\n            T_wt = mink.SE3.from_mocap_name(model, data, "target")\n            end_effector_task.set_target(T_wt)\n\n            for _ in range(max_iterations):\n                velocity = mink.solve_ik(\n                    configuration, tasks, rate_limiter.dt, solver, 1e-3\n                )\n                configuration.integrate_inplace(velocity, rate_limiter.dt)\n                error = end_effector_task.compute_error(configuration)\n                position_achieved = np.linalg.norm(error[:3]) <= position_threshold\n                orientation_achieved = np.linalg.norm(error[3:]) <= orientation_threshold\n                if position_achieved and orientation_achieved:\n                    break\n\n            data.ctrl = configuration.q\n            mujoco.mj_step(model, data)\n\n            viewer.sync()\n            rate_limiter.sleep()\n