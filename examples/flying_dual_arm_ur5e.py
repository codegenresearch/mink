from pathlib import Path\n\nimport mujoco\nimport mujoco.viewer\nimport numpy as np\nfrom dm_control import mjcf\nfrom loop_rate_limiters import RateLimiter\n\nimport mink\n\n_HERE = Path(__file__).parent\n_XML = _HERE / "universal_robots_ur5e" / "ur5e.xml"\n\ndef construct_model():\n    root = mjcf.RootElement()\n    root.statistic.meansize = 0.08\n    root.statistic.extent = 1.0\n    root.statistic.center = (0, 0, 0.5)\n    getattr(root.visual, "global").azimuth = -120\n    getattr(root.visual, "global").elevation = -20\n\n    root.worldbody.add("light", pos="0 0 1.5", directional="true")\n\n    base = root.worldbody.add("body", name="base")\n    width, height, depth = 0.8, 0.4, 0.2\n    base.add(\n        "geom",\n        type="box",\n        size=[width / 2, height / 2, depth / 2],\n        density=1e-3,\n        rgba=".9 .8 .6 1",\n    )\n    base.pos = [-0.0 * width, -0.0 * height, -0.5 * depth]\n    base.add("freejoint")\n    base.add("site", name="base_site", pos=[0, 0, depth], group=1)\n    left_site = base.add("site", name="l_attachment_site", pos=[0.3, 0, depth], group=5)\n    right_site = base.add(\n        "site",\n        name="r_attachment_site",\n        pos=[-0.3, 0, depth],\n        group=5,\n    )\n\n    left_ur5e = mjcf.from_path(_XML.as_posix())\n    left_ur5e.model = "l_ur5e"\n    left_ur5e.find("key", "home").remove()\n    left_site.attach(left_ur5e)\n\n    right_ur5e = mjcf.from_path(_XML.as_posix())\n    right_ur5e.model = "r_ur5e"\n    right_ur5e.find("key", "home").remove()\n    right_site.attach(right_ur5e)\n\n    body = root.worldbody.add("body", name="base_target", mocap=True)\n    body.add(\n        "geom",\n        type="box",\n        size=[0.05, 0.05, 0.05],\n        contype=0,\n        conaffinity=0,\n        rgba=".6 .3 .3 .5",\n    )\n\n    body = root.worldbody.add("body", name="l_target", mocap=True)\n    body.add(\n        "geom",\n        type="box",\n        size=[0.05, 0.05, 0.05],\n        contype=0,\n        conaffinity=0,\n        rgba=".3 .6 .3 .5",\n    )\n\n    body = root.worldbody.add("body", name="r_target", mocap=True)\n    body.add(\n        "geom",\n        type="box",\n        size=[0.05, 0.05, 0.05],\n        contype=0,\n        conaffinity=0,\n        rgba=".3 .3 .6 .5",\n    )\n\n    return mujoco.MjModel.from_xml_string(root.to_xml_string(), root.get_assets())\n\n\nif __name__ == "__main__":\n    model = construct_model()\n\n    configuration = mink.Configuration(model)\n\n    tasks = [\n        base_task := mink.FrameTask(\n            frame_name="base_site",\n            frame_type="site",\n            position_cost=1.0,\n            orientation_cost=1.0,\n        ),\n        left_ee_task := mink.FrameTask(\n            frame_name="l_ur5e/attachment_site",\n            frame_type="site",\n            position_cost=1.0,\n            orientation_cost=1.0,\n        ),\n        right_ee_task := mink.FrameTask(\n            frame_name="r_ur5e/attachment_site",\n            frame_type="site",\n            position_cost=1.0,\n            orientation_cost=1.0,\n        ),\n    ]\n\n    base_mid = model.body("base_target").mocapid[0]\n    left_mid = model.body("l_target").mocapid[0]\n    right_mid = model.body("r_target").mocapid[0]\n    model = configuration.model\n    data = configuration.data\n    solver = "quadprog"\n\n    with mujoco.viewer.launch_passive(\n        model=model, data=data, show_left_ui=False, show_right_ui=False\n    ) as viewer:\n        mujoco.mjv_defaultFreeCamera(model, viewer.cam)\n        viewer.opt.frame = mujoco.mjtFrame.mjFRAME_SITE\n\n        for mocap, frame in zip(\n            ["base_target", "l_target", "r_target"],\n            ["base_site", "l_ur5e/attachment_site", "r_ur5e/attachment_site"],\n        ):\n            mink.move_mocap_to_frame(model, data, mocap, frame, "site")\n\n        rate = RateLimiter(frequency=60.0, warn=True)\n        t = 0.0\n        while viewer.is_running():\n            data.mocap_pos[base_mid][2] = 0.3 * np.sin(2.0 * t)\n            base_task.set_target(mink.SE3.from_mocap_name(model, data, "base_target"))\n\n            data.mocap_pos[left_mid][1] = 0.5 + 0.2 * np.sin(2.0 * t)\n            data.mocap_pos[left_mid][2] = 0.2\n            left_ee_task.set_target(mink.SE3.from_mocap_name(model, data, "l_target"))\n\n            data.mocap_pos[right_mid][1] = 0.5 + 0.2 * np.sin(2.0 * t)\n            data.mocap_pos[right_mid][2] = 0.2\n            right_ee_task.set_target(mink.SE3.from_mocap_name(model, data, "r_target"))\n\n            vel = mink.solve_ik(configuration, tasks, rate.dt, solver, 1e-2)\n            configuration.integrate_inplace(vel, rate.dt)\n            mujoco.mj_camlight(model, data)\n\n            viewer.sync()\n            rate.sleep()\n            t += rate.dt\n