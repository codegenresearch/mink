"""Task adapted from https://github.com/stephane-caron/pink/pull/94."""\nfrom pathlib import Path\nimport mujoco\nimport mujoco.viewer\nimport numpy as np\nfrom dm_control import mjcf\nfrom loop_rate_limiters import RateLimiter, suppress_warnings\nimport mink\n_HERE = Path(__file__).parent\n_XML = _HERE / "kuka_iiwa_14" / "iiwa14.xml"\ndef construct_model():\n    root = mjcf.RootElement()\n    root.statistic.meansize = 0.08\n    root.statistic.extent = 1.0\n    root.statistic.center = (0, 0, 0.5)\n    root.visual.global_.azimuth = -180\n    root.visual.global_.elevation = -20\n    root.worldbody.add("light", pos="0 0 1.5", directional="true")\n    left_site = root.worldbody.add("site", name="l_attachment_site", pos=[0, 0.2, 0], group=5)\n    right_site = root.worldbody.add("site", name="r_attachment_site", pos=[0, -0.2, 0], group=5)\n    left_iiwa = mjcf.from_path(_XML.as_posix())\n    left_iiwa.model = "l_iiwa"\n    left_iiwa.find("key", "home").remove()\n    left_site.attach(left_iiwa)\n    for i, g in enumerate(left_iiwa.worldbody.find_all("geom")):\n        g.name = f"geom_{i}"\n    right_iiwa = mjcf.from_path(_XML.as_posix())\n    right_iiwa.model = "r_iiwa"\n    right_iiwa.find("key", "home").remove()\n    right_site.attach(right_iiwa)\n    for i, g in enumerate(right_iiwa.worldbody.find_all("geom")):\n        g.name = f"geom_{i}"\n    body = root.worldbody.add("body", name="l_target", mocap=True)\n    body.add("geom", type="box", size=".05 .05 .05", contype="0", conaffinity="0", rgba=".3 .6 .3 .5")\n    body = root.worldbody.add("body", name="r_target", mocap=True)\n    body.add("geom", type="box", size=".05 .05 .05", contype="0", conaffinity="0", rgba=".3 .3 .6 .5")\n    return mujoco.MjModel.from_xml_string(root.to_xml_string(), root.get_assets())\nif __name__ == "__main__":\n    model = construct_model()\n    configuration = mink.Configuration(model)\n    tasks = [\n        mink.FrameTask(frame_name="l_iiwa/attachment_site", frame_type="site", position_cost=2.0, orientation_cost=1.0),\n        mink.FrameTask(frame_name="r_iiwa/attachment_site", frame_type="site", position_cost=2.0, orientation_cost=1.0),\n    ]\n    collision_pairs = [\n        (mink.get_subtree_geom_ids(model, model.body("l_iiwa/link5").id), mink.get_subtree_geom_ids(model, model.body("r_iiwa/link5").id)),\n    ]\n    limits = [\n        mink.ConfigurationLimit(model=model),\n        mink.CollisionAvoidanceLimit(model=model, geom_pairs=collision_pairs, minimum_distance_from_collisions=0.1, collision_detection_distance=0.2),\n    ]\n    left_mid = model.body("l_target").mocapid[0]\n    right_mid = model.body("r_target").mocapid[0]\n    solver = "osqp"\n    l_y_des = np.array([0.392, -0.392, 0.6])\n    r_y_des = np.array([0.392, 0.392, 0.6])\n    A = l_y_des.copy()\n    B = r_y_des.copy()\n    with mujoco.viewer.launch_passive(model=model, data=configuration.data, show_left_ui=False, show_right_ui=False) as viewer:\n        mujoco.mjv_defaultFreeCamera(model, viewer.cam)\n        viewer.opt.frame = mujoco.mjtFrame.mjFRAME_SITE\n        mink.move_mocap_to_frame(model, configuration.data, "l_target", "l_iiwa/attachment_site", "site")\n        mink.move_mocap_to_frame(model, configuration.data, "r_target", "r_iiwa/attachment_site", "site")\n        rate = RateLimiter(frequency=60.0, warn=False)\n        t = 0.0\n        while viewer.is_running():\n            mu = (1 + np.cos(t)) / 2.0\n            l_y_des[:] = A + (B - A + 0.2 * np.array([0, 0, np.sin(mu * np.pi) ** 2])) * mu\n            r_y_des[:] = B + (A - B + 0.2 * np.array([0, 0, -np.sin(mu * np.pi) ** 2])) * mu\n            configuration.data.mocap_pos[left_mid] = l_y_des\n            configuration.data.mocap_pos[right_mid] = r_y_des\n            left_ee_task.set_target(mink.SE3.from_mocap_name(model, configuration.data, "l_target"))\n            right_ee_task.set_target(mink.SE3.from_mocap_name(model, configuration.data, "r_target"))\n            vel = mink.solve_ik(configuration, tasks, rate.dt, solver, 1e-2, False, limits=limits)\n            configuration.integrate_inplace(vel, rate.dt)\n            mujoco.mj_camlight(model, configuration.data)\n            viewer.sync()\n            rate.sleep()\n            t += rate.dt