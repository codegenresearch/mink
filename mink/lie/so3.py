from __future__ import annotations\nfrom dataclasses import dataclass\nfrom typing import NamedTuple\nimport mujoco\nimport numpy as np\nfrom .base import MatrixLieGroup\nfrom .utils import get_epsilon, skew, mat2quat\n_IDENTITY_WXYZ = np.array([1.0, 0.0, 0.0, 0.0], dtype=np.float64)\n_INVERT_QUAT_SIGN = np.array([1.0, -1.0, -1.0, -1.0], dtype=np.float64)\nclass RollPitchYaw(NamedTuple):\n    """Represents a rotation in 3D space using roll, pitch, and yaw angles."""\n    roll: float  # Rotation around the x-axis (in radians)\n    pitch: float  # Rotation around the y-axis (in radians)\n    yaw: float  # Rotation around the z-axis (in radians)\n@dataclass(frozen=True)\nclass SO3(MatrixLieGroup):\n    """Special orthogonal group for 3D rotations.\n    \\(SO(3)\\) represents the group of 3D rotations. The internal parameterization is a quaternion (qw, qx, qy, qz),\n    and the tangent parameterization is the angular velocity vector (\\(\omega_x, \omega_y, \omega_z\\)).\